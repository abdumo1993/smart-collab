// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  name           String?
  password       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  documents      Document[] // Documents owned by this user
  collaborations Collaborator[] // Documents this user collaborates on
  messages       Message[] // Messages sent by this user
}

model Document {
  id            Int            @id @default(autoincrement())
  title         String
  ownerId       Int
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  collaborators Collaborator[] // Users who can collaborate on this document
  messages      Message[]

  state DocumentState? // Optional: CRDT state for persistence
}

model Collaborator {
  id         Int      @id @default(autoincrement())
  userId     Int
  documentId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  role       Role     @default(EDITOR) // e.g., OWNER, EDITOR  EDITOR, VIEWER
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, documentId]) // A user can only collaborate on a document once
}

model DocumentState {
  id         Int      @id @default(autoincrement())
  documentId Int      @unique // One state per document
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  state      Bytes // Stores the CRDT state (e.g., Yjs state as binary data)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId Int
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}
