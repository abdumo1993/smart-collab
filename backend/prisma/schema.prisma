// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  CONSUMER
}

enum Permission {
  OWNER
  VIEWER
  EDITOR
}

model User {
  id             String            @id @default(uuid())
  firstName      String
  lastName       String
  email          String         @unique
  password       String
  role           Role
  createdAt      DateTime       @default(now())
  phone          String?
  updatedAt      DateTime       @updatedAt
  documents      Document[] // Documents owned by this user
  collaborations Collaborator[] // Documents this user collaborates on
  messages       Message[] // Messages sent by this user
  repositories   Repository[] // GitHub repositories connected by this user
  githubRedirects GitHubInstallationRedirect[] // GitHub installation redirects
  // Email confirmation and password reset
  isEmailConfirmed      Boolean   @default(false)
  emailConfirmationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  // OAuth2
  oauthAccounts         OAuthAccount[]
}

model Document {
  id            String         @id @default(uuid())
  title         String
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  collaborators Collaborator[] // Users who can collaborate on this document
  messages      Message[]
  ops           Operation[] // Operations associated with this document
}

model Operation {
  id          String   @id @default(uuid())
  clientId    String
  clock       Int
  type        String
  content     Bytes // Stores the serialized Content (e.g., JSON or binary)
  origin      String?
  rightOrigin String?
  itemID      String?
  documentId  String?
  document    Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Collaborator {
  id         String     @id @default(uuid())
  userId     String
  documentId String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  permission Permission @default(VIEWER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([userId, documentId]) // A user can only collaborate on a document once
}

model Message {
  id         String   @id @default(uuid())
  content    String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  position   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


// ========== RefreshToken ==========
model RefreshToken {
  refreshTokenId String   @id @default(uuid())
  userId         String
  token          String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
}

model OAuthAccount {
  id                String   @id @default(uuid())
  provider          String
  providerAccountId String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Repository {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String   // Repository name (e.g., "repo-name")
  fullName          String   // Full repository name (e.g., "username/repo-name")
  private           Boolean  @default(false)
  installationId    String?  // GitHub App installation ID
  webhookId         String?  // GitHub webhook ID
  webhookUrl        String?  // Our webhook endpoint URL
  // webhookSecret     String?  // Secret for webhook signature verification - not needed for GitHub Apps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, fullName])
}

model GitHubInstallationRedirect {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  redirectUrl       String   // Frontend redirect URL
  repositoryFullName String  // Repository being connected
  state             String?  // Optional state parameter
  createdAt         DateTime @default(now())
  expiresAt         DateTime // Expires after 1 hour

  @@unique([userId, repositoryFullName])
}